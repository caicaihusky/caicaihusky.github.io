[{"title":"一些笔记","date":"2017-03-15T13:26:12.000Z","path":"2017/03/15/notes_01/","text":"不定期更新 字节流 InputStream / OutputStreamInputStream:抽象了应用程序读取数据的能力OutputSream:抽象了应用程序写数据的能力 输入流基本方法in.read()读取一个字节无符号填充到int的低八位，-1 是EOFin.read(byte[] buf)读取数据填充到字节数组 bufin.read(byte[] buf,int start,int size) 输出流基本方法out.write(int b)写出一个 byte 到流，b的低八位out.write(byte[] buf)将 buf 字节数组都写入到流out.write(byte[] buf,int start,int size) FileInputStream在文件上读取数据FileInputStream in = new FileInputStream(fileName); FileOutputStream向文件中写出byte数据FileOutputStream out = new FileOutputStream(fileName); DataOutputStream/DataInputStream对流功能的扩展，可以更加方便地读取 int,long 字符等数据类型DataOutputStream dos = new DataOutputStream(new FileOutputSteam(Filename)); BufferedInputStream BufferedPOutputStream提供了带缓冲区的操作 一般文件打开或者读取时，都会加上缓冲，提高 IO的性能BufferedInputStream bis = new BufferedInputStream(new FileInoutStream(Filename)); 字符流 字符流 —&gt;文本，文本文件java的文本(char)是 16 位无符号整数，是 unicode 编码（双字节）文件是一个字节一个字节的数据序列文本文件是文本 char 序列按照某种编码方案序列化为 byte 的存储结果 字符流 Reader / WriterInputStreamReader 将 byte 流解析为 char 流，按照编码处理OutputStreamWriter 提供 char 流到 byte 流，按照编码处理InputStreamReader isr = new InputStream(new FileInputStream(Filename)); FileReader / FileWriterFileReader fr = new FileReader(Filename); BufferedReader / BufferedWriterBufferedReader—&gt;readLine 一次读一行 不识别换行BufferedWriter—&gt;write 写一行 不能换行PrinterWriter-&gt;println 可换行BufferedReader br = new BufferedReader(new FileInputStream(Filename))PrinterWriter pw = new PrinterWriter(Filename);","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"字节字符流","slug":"字节字符流","permalink":"http://yoursite.com/tags/字节字符流/"}]}]