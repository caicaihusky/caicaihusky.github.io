[{"title":"关于 Web 开发的初级笔记","date":"2017-03-25T05:08:22.000Z","path":"2017/03/25/notes_02/","text":"不定期更新 转发和重定向的区别首先，转发是服务器行为，重定向是客户端行为。这可以从它们的运行过程进行分析。在转发的过程中，浏览器先给服务器发送 http 请求，服务器接收此请求后，调用容器内的方法完成处理和转发动作。注意，这里“转发”的路径必须是在同一个 web 容器下的 url，而不能转到其他的 web 路径上去。因此这里产生了一个判断方法：网址是任何一个web网址还是本站点下的网址。如果是任何一个其他 web 网址（且不为本站点的网址），那么所进行的动作就为重定向。接着分析，由于转发的行为是在同一个 web 容器下进行，且都在服务器端完成，因此 servlet 间共享的是一个 request，数据可以在不同的 servlet 和 jsp 之间传递。在重定向的过程中，在浏览器给服务器发送 http 请求，服务器接收此请求后，服务器给浏览器一个响应，告诉浏览器（客户端）“重新发送一个新的请求”给一个新的网址。而这个网址我们上文也提过了，可以是这个 web 容器内的网址，也可以是其他的网址。显然，这“重新发送的请求”和第一次发送的请求不是同一个请求，因此就形成了两个不同的 request，从而使得第二个 request 不能获得第一个 request 里的数据。 显式地观察，在转发行为中，浏览器的网址是不会发生改变的。因为最后转发到哪个网址，浏览器并不知道，它只完成了初次提交请求的动作，中间过程都由服务器负责。而在重定向行为里，网址会改变。因为它接收到了服务器的响应，并重新提交了新的 http 请求。 JSP include 指令 include 动作的区别1.include 指令 静态引入 web 资源，也就是说，被引入文件内容将作为使用 include 指令的 JSP 页面所生成的 Servlet 源码一部分而存在。若改变了被包含的文件，则主文件的代码就发生了变化，因此服务器会重新编译主文件。 可以改变 HTTP 响应头以及响应状态码 相对路径是相对于文件的 无论 JSP 文件的扩展名是不是.jsp，都会按照 JSP 页面处理 处理不存在的 web 资源时，会抛出异常 2.include 动作 动态引入 web 资源。被包含的文件改变不会影响到主文件，因此服务器不会对主文件重新编译，而只需要重新编译被包含的文件即可，而对被包含文件的编译是在执行时才进行的，也就是说，只有当 include 动作被执行时，使用该标识包含的目标文件才会被编译，否则被包含的文件不会被编译 不可以改变 HTTP 响应头以及响应状态码 相对路径是相对于页面的 包含的文件如果是其他扩展名，会将内容当做静态文件处理 处理不存在的 web 资源时，会继续执行","tags":[{"name":"JSP","slug":"JSP","permalink":"http://yoursite.com/tags/JSP/"},{"name":"Web","slug":"Web","permalink":"http://yoursite.com/tags/Web/"}]},{"title":"关于 javaIO 的一些笔记","date":"2017-03-15T13:26:12.000Z","path":"2017/03/15/notes_01/","text":"不定期更新 字节流 InputStream / OutputStreamInputStream:抽象了应用程序读取数据的能力OutputSream:抽象了应用程序写数据的能力 输入流基本方法in.read()读取一个字节无符号填充到int的低八位，-1 是EOFin.read(byte[] buf)读取数据填充到字节数组 bufin.read(byte[] buf,int start,int size) 输出流基本方法out.write(int b)写出一个 byte 到流，b的低八位out.write(byte[] buf)将 buf 字节数组都写入到流out.write(byte[] buf,int start,int size) FileInputStream在文件上读取数据FileInputStream in = new FileInputStream(fileName); FileOutputStream向文件中写出byte数据FileOutputStream out = new FileOutputStream(fileName); DataOutputStream/DataInputStream对流功能的扩展，可以更加方便地读取 int,long 字符等数据类型DataOutputStream dos = new DataOutputStream(new FileOutputSteam(Filename)); BufferedInputStream BufferedPOutputStream提供了带缓冲区的操作 一般文件打开或者读取时，都会加上缓冲，提高 IO的性能BufferedInputStream bis = new BufferedInputStream(new FileInoutStream(Filename)); 字符流 字符流 —&gt;文本，文本文件java的文本(char)是 16 位无符号整数，是 unicode 编码（双字节）文件是一个字节一个字节的数据序列文本文件是文本 char 序列按照某种编码方案序列化为 byte 的存储结果 字符流 Reader / WriterInputStreamReader 将 byte 流解析为 char 流，按照编码处理OutputStreamWriter 提供 char 流到 byte 流，按照编码处理InputStreamReader isr = new InputStream(new FileInputStream(Filename)); FileReader / FileWriterFileReader fr = new FileReader(Filename); BufferedReader / BufferedWriterBufferedReader—&gt;readLine 一次读一行 不识别换行BufferedWriter—&gt;write 写一行 不能换行PrinterWriter-&gt;println 可换行BufferedReader br = new BufferedReader(new FileInputStream(Filename))PrinterWriter pw = new PrinterWriter(Filename);","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"字节字符流","slug":"字节字符流","permalink":"http://yoursite.com/tags/字节字符流/"}]}]